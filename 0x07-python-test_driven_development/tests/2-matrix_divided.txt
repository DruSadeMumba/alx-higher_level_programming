The ``matrix_divided`` module
===========================

Using ``matrix_divided``
----------------------

Import func from module
        >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Module docstring:
        >>> m = __import__("2-matrix_divided").__doc__
        >>> len(m) > 1
        True

Function docstring:
        >>> f = __import__("2-matrix_divided").matrix_divided.__doc__
        >>> len(f) > 1
        True

matrix is list of list and div is int:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, 3))
        [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

matrix is list of list and div is float:

        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, 2.5))
        [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

Empty list:
        >>> matrix = []
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty list of lists:
        >>> matrix = [[]]
        >>> print(matrix_divided(matrix, 3))
        [[]]

div is string:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, "3"))
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

div is empty:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, ))
        Traceback (most recent call last):
        ...
        TypeError: matrix_divided() missing 1 required positional argument: 'div'

No args:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided())
        Traceback (most recent call last):
        ...
        TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

div is 0:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, 0))
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

matrix is empty string:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided("", 3))
        []

matrix is string:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided("matrix", 3))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix is int:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(1, 3))
        Traceback (most recent call last):
        ...
        TypeError: 'int' object is not iterable

matrix is float:
        >>> matrix = [
        ...     [1, 2, 3],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(4.2, 3))
        Traceback (most recent call last):
        ...
        TypeError: 'float' object is not iterable

Different row sizes:
        >>> matrix = [
        ...     [1, 2, 3, 4],
        ...     [4, 5, 6]
        ... ]
        >>> print(matrix_divided(matrix, 3))
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

